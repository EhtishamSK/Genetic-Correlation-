# Set working directory where files are located
setwd("C:/Users/ehtis/OneDrive - New Mexico State University/SUNNY/Research Projects/Mechanical Harvest Paper/Phenotype manuscript/single location/NSH")
getwd()  # Confirm working directory

# Load genotype data: skipping the first 10 lines for compatibility with analysis
# My GBS file is in HamMap format, so skipping 10 lines to remove the header and comments
hapmap_data <- read.table("GBS_PANEL_DIPLOID_75G.hmp.txt", header = FALSE, skip = 10)

# Check data structure to confirm import was successful
head(hapmap_data)
str(hapmap_data)

# Load required library for data manipulation
library(dplyr)

# Extract genotype data from the dataset, starting at column V12
genotype_data <- hapmap_data[, 12:ncol(hapmap_data)]
str(genotype_data)

# Define a conversion function for genotype coding:
# AA = 0 (homozygous reference), AG or GA = 1 (heterozygous), GG = 2 (homozygous alternate)
convert_genotype <- function(genotype) {
  if (is.na(genotype)) {
    return(NA)  # Keep missing data as NA
  } else if (genotype == "AA") {
    return(0)
  } else if (genotype == "AG" | genotype == "GA") {
    return(1)
  } else if (genotype == "GG") {
    return(2)
  } else {
    return(NA)  # Return NA for unrecognized values
  }
}

# Apply conversion function to genotype data, converting to numeric format
numeric_genotypes <- apply(genotype_data, MARGIN = c(1, 2), FUN = convert_genotype)
numeric_genotypes <- t(numeric_genotypes)  # Transpose so rows are genotypes, columns are SNPs

# Calculate the genetic relationship matrix (GRM) using rrBLUP library
library(rrBLUP)
G <- A.mat(numeric_genotypes, return.impute = TRUE)
str(G$A)  # GRM should now be a 75 x 75 matrix

# Extract genotype names from GRM for alignment checking
geno_names_grm <- rownames(G$A)

# Import and structure phenotypic data
pheno <- read.csv("mydata_gc.csv")
pheno$geno <- as.factor(pheno$geno)  # Ensure genotype names are factors
geno_names_pheno <- pheno$geno  # Extract genotype names from phenotypic data

# Verify alignment of genotype names between GRM and phenotypic data
all(geno_names_pheno == geno_names_grm)  # Check for identical order

# Load sommer library and fit multivariate model for specific traits
library(sommer)
model_multivariate <- mmer(cbind(PWDT, PHT) ~ 1, random = ~ vsr(geno, Gu = G$A), rcov = ~ units, data = pheno)

# Extract and check variance-covariance components
varcov_components <- summary(model_multivariate)$varcomp
cov_A_PWDT_PHT <- varcov_components["u:geno.PWDT-PHT", "VarComp"]

# Calculate genetic correlation between traits PWDT and PHT
sigma_A_PWDT <- varcov_components["u:geno.PWDT-PWDT", "VarComp"]
sigma_A_PHT <- varcov_components["u:geno.PHT-PHT", "VarComp"]
genetic_correlation_PWDT_PHT <- cov_A_PWDT_PHT / sqrt(sigma_A_PWDT * sigma_A_PHT)

# Loop to calculate genetic correlations between all trait pairs
genetic_correlation_list <- list()
traits <- colnames(pheno)[2:8]  # Exclude 'geno' from trait list
for (i in 1:(length(traits)-1)) {
  for (j in (i+1):length(traits)) {
    trait1 <- traits[i]
    trait2 <- traits[j]
    model_multivariate <- tryCatch({
      mmer(as.formula(paste("cbind(", trait1, ",", trait2, ") ~ 1")), random = ~ vsr(geno, Gu = G$A), rcov = ~ units, data = pheno)
    }, error = function(e) { return(NULL) })
    if (!is.null(model_multivariate)) {
      varcov_components <- summary(model_multivariate)$varcomp
      if (paste0("u:geno.", trait1, "-", trait2) %in% rownames(varcov_components)) {
        cov_A_trait1_trait2 <- varcov_components[paste0("u:geno.", trait1, "-", trait2), "VarComp"]
        sigma_A_trait1 <- varcov_components[paste0("u:geno.", trait1, "-", trait1), "VarComp"]
        sigma_A_trait2 <- varcov_components[paste0("u:geno.", trait2, "-", trait2), "VarComp"]
        genetic_correlation <- cov_A_trait1_trait2 / sqrt(sigma_A_trait1 * sigma_A_trait2)
        genetic_correlation_list[[paste(trait1, trait2, sep = "_")]] <- genetic_correlation
      }
    }
  }
}

# Convert correlation list to data frame and save
genetic_correlation_df <- as.data.frame(do.call(rbind, genetic_correlation_list))
colnames(genetic_correlation_df) <- "Genetic_Correlation"
write.csv(genetic_correlation_df, "genetic_correlations.csv", row.names = TRUE)

# Prepare a correlation matrix for heatmap visualization
trait_names <- unique(unlist(strsplit(rownames(genetic_correlation_df), "_")))
correlation_matrix <- matrix(NA, nrow = length(trait_names), ncol = length(trait_names))
rownames(correlation_matrix) <- trait_names
colnames(correlation_matrix) <- trait_names
for (i in 1:nrow(genetic_correlation_df)) {
  trait_pair <- strsplit(rownames(genetic_correlation_df)[i], "_")[[1]]
  trait1 <- trait_pair[1]
  trait2 <- trait_pair[2]
  correlation <- genetic_correlation_df[i, "Genetic_Correlation"]
  correlation_matrix[trait1, trait2] <- correlation
  correlation_matrix[trait2, trait1] <- correlation
}
diag(correlation_matrix) <- 1
write.csv(as.data.frame(correlation_matrix), "genetic_correlation_matrix.csv", row.names = TRUE)

# Plot the correlation heatmap using ggplot2
library(ggplot2)
library(reshape2)
upper_triangle <- function(correlation_matrix) {
  correlation_matrix[lower.tri(correlation_matrix)] <- NA
  return(correlation_matrix)
}
upper_corr_matrix <- upper_triangle(as.matrix(correlation_matrix))
genetic_correlation_long <- melt(upper_corr_matrix, na.rm = TRUE)
heatmap_plot <- ggplot(data = genetic_correlation_long, aes(Var1, Var2, fill = value)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, name = "Genetic Correlations") +
  geom_text(aes(label = round(value, 2)), color = "black", size = 4) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
  labs(x = "Traits", y = "Traits", title = "Genetic Correlation Heatmap") +
  coord_fixed()
print(heatmap_plot)
